package de.rwth.domains; // Generated package name

import java.util.Iterator;

/**
 * Interface for modeling mathematical sets. A set knows all its elements, the number
 * of elements, and can be used to iterate over them.
 *
 * <p>
 * 
 * This is <b>not</b> intended to be used for implementing collection data structures:
 * <ol>
 * <li>After creation, sets do not change: No elements are added or removes</li>
 * 
 * <li>
 * Sets can be infinite: In this case, the <code>size()</code> must return -1. For
 * debugging purposes, a (finite) skeleton subset may be defined using
 * <code>sizeSkel()</code> and <code>iteratorSkel()</code>.
 * </li>
 * </ol>
 *
 * Since <code>iterator()</code> and <code>isElement()</code> are closely related,
 * there is an inner class <code>Default</code> containing a default implementation
 * of <code>isElement()</code> in terms of <code>iterator()</code>.
 * 
 * @author <a href="mailto:M.Mohnen@gmx.de">Markus Mohnen</a>
 * @version $Id: Set.java,v 1.3 2002/09/27 09:04:53 mohnen Exp $
 */
public interface Set {
  /**
   * Checks if two elements of this set are equal.
   * 
   * <br>
   * 
   * Implementations should guarantee that <code>equals</code> is reflexive,
   * transitive and symmetric. Furthermore, <code>equals(e1,e2)</code> should
   * coincide with <code>e1.equals(e2)</code>.
   *
   * @param <code>e1</code> a value of type <code>Object</code>
   * @param <code>e2</code> a value of type <code>Object</code>
   * 
   * @return <code>true</code> if <code>e1</code> and <code>e2</code> belong to this
   * set and are equal, <code>false</code> otherwise
   *
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public boolean equals(Object e1, Object e2);
  
  /**
   * Checks if an element is contained in this set.
   * 
   * <br>
   * 
   * Implementations should guarantee that <code>isElement()</code> is true for all
   * objects generated by <code>{@link #iterator()}</code> and false for all other
   * objects.
   *
   * @param <code>e</code> a value of type <code>Object</code>
   * @return <code>true</code> if and only if this set contains this element.
   *
   * @see #iterator()
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public boolean isElement(Object e);
  
  /**
   * Returns an <code>Iterator</code> of the elements of this set.
   * 
   * <br>
   * 
   * Implementations should guarantee that:
   * <ul>
   * <li><code>{@link #isElement(Object e)}</code> yields true for all elements.</li>
   * <li> They occur in the same sequence for each invocation.</li>
   * </ul>
   *
   * @return an <code>Iterator</code> of all elements of this set.
   *
   * @see #isElement(Object e)
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public Iterator iterator();

  /**
   * Returns the size of this set.
   * 
   * <br>
   * Implementations should guarantee that it is the number of
   * times <code>iterator().hasNext()</code> can be called.
   *
   * @return -1 iff the set has infinite size, the number of elements otherwise.
   *
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public long size();

  /**
   * Returns an <code>Iterator</code> of the elements of the skeleton subset this
   * set. It maybe <code>null</code> if there is no skeleton subset.
   * 
   * <br>
   * 
   * Implementations should guarantee that:
   * <ul>
   * <li><code>{@link #isElement(Object e)}</code> yields true for all elements.</li>
   * <li> They occur in the same sequence for each invocation.</li>
   * </ul>
   *
   * @return an <code>Iterator</code> of all elements of this set.
   *
   * @see #isElement(Object e)
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public Iterator iteratorSkel();
  
  /**
   * Returns the size of the skeleton subset of this set.
   * 
   * <br>
   * Implementations should guarantee that it is the number of
   * times <code>iterator().hasNext()</code> can be called.
   *
   * @return -1 iff there is no skeleton subset, the number of elements otherwise.
   *
   * @see de.rwth.domains.Domain#checkProperties(Set set)
   */
  public long sizeSkel();

  
  /**
   * Container class for default implementations of methods.
   *
   */
  public static class Default {
    
    /**
     * Default implementation for <code>{@link #isElement(Object e)}</code>. It
     * checks if an element is contained in a set by iterating over all
     * elements. This is useful for finite sets only.
     *
     * @param set a <code>Set</code> value
     * @param e an <code>Object</code> value
     * @return a <code>boolean</code> value
     */
    public static boolean isElement(Set set, Object e) {
      for (Iterator i=set.iterator(); i.hasNext(); ) {
	if (set.equals(e,i.next())) return true;
      }
      return false;
    }
  }
}
